separation-of-concerns
{"ID":"separation-of-concerns","Title":"Separation of Concerns","Text":"\u003e Do one thing and do it well.\n\nSeparation of concerns is a concept that can be described as the art of only doing what the tool should be concerned with, never more than needs to be done. You don't expect a knife to function as a lighter. A knife only needs to cut and it does that one thing very well.\n\n## How does this apply to software?\n\nAny type of modern software architecture allows us to structure our code into modules, packages, files, libraries, engines and other types of abstractions that let us reuse existing functionality.\n\nWhenever you write a new module, ask yourself this: Does this module really need to contain all the code it has inside it? Is every part of this module really dealing with the same problem, the same *concern*?\n\nChances are high that you have written a module in the past that does much more than it needs to do. The module is doing things that it should not be concerned with. These different concerns should be separated into different modules, each dealing only with the bare minimum they need to deal with.\n\n## What's the benefit?\n\nBy doing so, you will notice that your code gains a higher chance of being reused in a different project. Modules can be tested much easier because the amount of possible states you need to reason about becomes much smaller, therefore contributing to overall better software quality.\n\n## What about frameworks?\n\nThis is actually one of the main reasons I don't like monolithic frameworks. You import one package (the framework) and it concerns itself with a multitude of problems. It becomes hard to test \u0026 reason about this software. Understanding and fixing bugs becomes difficult because it deals with so many things, the faulty state could have been caused by any part of the system.\n\nInstead, what software developers should strive for, is to make small and independent packages that deal with a single problem only. Do not offer a single package that deals with all of the world's problems, offer a set of modules that developers can choose from. By doing so, a framework becomes a *specification* of modules, a *concept*, rather than an actual package with thousand dependencies.\n\n## Conclusion\n\n* Separate concerns.\n* Do one thing and do it well.\n* Avoid centralism, prefer composition.\n","Created":"2018-06-25T00:16:40+00:00","Published":true}
starting-a-startup
{"ID":"starting-a-startup","Title":"Starting a Startup","Text":"I have decided to start a bootstrapping startup around the development of modern web applications!\n\nThis means we're starting with exactly 0 initial funding and growing with end-user sales from existing products only.\n\nIf you are one of the following:\n\n* Web Developer (full-stack, pref. Go \u0026 TypeScript)\n* Graphics Designer\n* UI/UX Designer\n* Marketer\n\nPlease get in contact with me.\n\nDue to the nature of bootstrapping, being in this is more of a future investment rather than a quick way to get money. I can not offer any payment in the initial phase where we get started building products, however this situation will change once products are starting to sell.\n\nThis will by no means be an easy task because bootstrapping is considered one of the hardest things to pull off, however I am willing to try it and learn from the experience.\n\nPersonally, I am operating this in parallel to \"normal work\", so I can have a stable source of income. I would expect people interested in this startup to do the same.\n\nName is not decided yet, I am thinking something along the lines of \"Pixalize\" (typo intended), but ultimately I'd like to ask the first people who join what we should be called.\n\nThere are a few ideas currently in progress but if you have your own idea of a web app that could improve people's lives, you can suggest it and we'll take a look at how reasonable the idea is. I want people to work on services they care about, they should have fun in the process. For you to have fun developing the service is of utmost importance to me.\n\nYou can work from anywhere. Remote work is possible via video communication on Google Hangouts. English is the company internal communication language. Your location is irrelevant but I'd prefer people close to JST/Tokyo timezone simply because it's easier to meet up at similar times. If you are in Kyoto/Osaka, in the Kansai area of Japan, we can also arrange to meet up face-to-face.\n\nFeel free to leave me a message on any social network if this resonates with you.\n","Created":"2018-07-02T03:01:13+00:00","Published":false}
tabs-vs-spaces
{"ID":"tabs-vs-spaces","Title":"Tabs vs. Spaces","Text":"Let's take a look at tabs vs. spaces. This discussion is famous amongst all skill levels of developers and it seems that noone can really convince the other side. People have different opinions on why one side is better than the other and cannot unanimously agree on one style. I think one of the main reasons for this problem is that the discussion is always about 100% tabs vs. 100% spaces instead of looking at an alternative approach: Using both.\n\n## Both?\n\nAt first it might sound weird, but we're not just going to randomly insert a different indentation character whenever we want to. There is going to be a ruleset and that ruleset will be well defined. That means by going hybrid, there are no discussions needed for when tabs or spaces should be used, as every situation will be clearly covered by those rules.\n\n## Which rules, exactly?\n\n1. Tabs for **semantic indentation**\n2. Spaces for **presentational alignment**\n\n### Semantic indentation\n\n\u003e Relating to meaning in language or logic.\n\nSemantic indentation is required when the whitespace has a meaning in the given context. Note that *meaning* doesn't necessarily imply that it is needed for the compiler to process the code as in the case of Python e.g., *meaning* can simply refer to an indented block of code, let's say a `for` loop, where the body of the loop is semantically different from the surrounding code and therefore is indented.\n\n```go\nfor {\n\t// This is semantic indentation: Use tabs.\n}\n```\n\nSemantic indentation should be performed as the very first step, using **tabs**.\n\nSpaces would need to be repeated multiple times to represent a single meaning. This is inefficient for disk space and therefore code parsing, let alone the fact that doing so doesn't give us any benefits in the first place. Or when was the last time that you used 4 square brackets to represent an array in JSON?\n\n```json\n[[[[\"Behold the new JSON standard!\"]]]]\n```\n\nWhy use more when you can do it with less?\n\nWe also get the added benefit of letting every team member be able to adjust the tab width and therefore personalize how much pixel space he or she would prefer to be used for a single tab. This can heavily improve readability for a person that is used to very different widths on his or her monitor. Normally, if you used tabs 100% of the time, this argument would be held up **against** using tabs because it can break the alignment of your code. That is exactly why we are going to define separate rules for alignment.\n\n### Presentational alignment\n\n\u003e The proper positioning or state of adjustment of parts in relation to each other.\n\nPresentational alignment refers to positioning different parts better in relation to each other and does not convey any meaning. It will make the code look better but the whitespace doesn't convey that the code is different from the surrounding code, thus being only used to align parts with each other for presentational purposes.\n\n```go\ntype User struct {\n\t// Note how we're using tabs to indent the struct\n\t// and spaces to align the name of the data type.\n\tID   string\n\tName string\n\tAge  int\n}\n```\n\nAlignment should be used *after* semantic indentation and should be done using **spaces**. The reason is that alignment requires precise positioning on a monospace font and the tab character can't do that because it has dynamic width.\n\nYour team members will thank you because they can finally change the indentation width to something they like and it won't break the alignment of the code.\n\n## Conclusion\n\nRather than going full tabs or full spaces, consider using a hybrid approach where each character does what it's best at and therefore combining the best of both worlds. I have been using this system for as long as I can remember and I never had a problem with it. For me, this is the de facto standard nowadays and the more people start switching to this system, the better. Amen.\n","Created":"2018-06-24T07:03:20+00:00","Published":true}
